/*
要把两个数组合并为一个有序数组，并删除合并后数组的第二个元素
*/
function mergeAndSortArrays(arr1, arr2) {
  // 合并数组
  let mergeArray = arr1.concat(arr2)

  // 对合并后的数组进行排序
  mergeArray.sort((a, b) => a - b)

  // 删除第二个元素
  mergeArray.splice(1, 1)

  return mergeArray
}

// 示例
let arr1 = [3, 1, 4, 1, 2]
let arr2 = [6, 5, 2]
console.log(mergeAndSortArrays(arr1, arr2)) // 输出: [1,2,2 3, 4, 5, 6]

/*









复杂度分析

时间复杂度：

合并操作的时间复杂度是O(n)，其中n是两个数组长度之和。
排序操作的时间复杂度通常是O(n log n)，这是因为大多数现代浏览器使用的排序算法（如快速排序、归并排序等）在平均情况下的时间复杂度是O(n log n)。
删除操作的时间复杂度是O(n)，因为在最坏的情况下可能需要移动数组中几乎所有的元素来填补被删除元素留下的空位。
综上所述，总的时间复杂度是O(n log n)，主要由排序操作决定。

空间复杂度：

合并操作的空间复杂度是O(n)，需要额外的空间来存储合并后的数组。
排序操作的空间复杂度取决于具体的排序算法。例如，归并排序的空间复杂度是O(n)，但是在实际应用中，大多数JavaScript引擎会使用原地排序算法（如快速排序），其空间复杂度更低。
删除操作不需要额外的显著空间。
综上所述，总的空间复杂度接近O(n)。

总结
这种方法提供了一个简单有效的方式来合并两个数组为一个有序数组，并删除合并后数组的第二个元素。虽然排序操作增加了时间复杂度，但这是必须的步骤以保证数组的有序性。在实际应用中，这种方法的性能通常是可接受的。
*/
