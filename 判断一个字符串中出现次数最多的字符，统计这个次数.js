/*
要解决这个问题，我们可以使用JavaScript编程语言来实现一个函数，该函数能够统计一个字符串中出现次数最多的字符及其出现的次数。下面是一个步骤分解：

1. **初始化**：创建一个对象（或哈希表）来存储每个字符及其出现的次数。
2. **遍历字符串**：逐个字符地遍历输入字符串，对于每个字符，更新存储在对象中的计数。
3. **找到最大计数**：遍历上一步创建的对象，找到具有最大计数的字符及其计数。
4. **返回结果**：返回最大计数值。

下面是实现上述逻辑的JavaScript代码示例：
*/
function findMaxCharCount(str) {
  if (str.length === 0) {
    return 0 // 如果字符串为空，则直接返回0
  }

  const charMap = {} // 创建一个空对象来存储字符及其出现次数
  let maxCount = 0 // 初始化最大计数为0

  // 遍历字符串，统计每个字符的出现次数
  for (let char of str) {
    if (charMap[char]) {
      charMap[char]++
    } else {
      charMap[char] = 1
    }

    // 同时检查是否需要更新最大计数
    if (charMap[char] > maxCount) {
      maxCount = charMap[char]
    }
  }

  // 返回出现次数最多的字符的次数
  return maxCount
}

// 示例
console.log(findMaxCharCount('banana'))

/*
这段代码首先检查字符串是否为空，如果是，则直接返回0。然后，它使用一个对象charMap来跟踪每个字符的出现次数。通过遍历字符串的每个字符，代码更新这个对象中的计数，并在每次更新时检查是否需要更新maxCount变量，该变量跟踪到目前为止发现的最大字符出现次数。最后，函数返回maxCount的值，即出现次数最多的字符的次数。

请注意，这个实现只返回最大的出现次数，而不是具体哪个字符出现的次数最多。如果要返回具体的字符及其出现次数，还需要进一步修改代码。
*/

/**
 * 分析上述JavaScript代码的复杂度主要涉及两个方面：时间复杂度和空间复杂度。

### 时间复杂度

1. **遍历字符串统计字符出现次数**：这一步的时间复杂度为`O(n)`，其中`n`是输入字符串的长度。因为我们需要逐个检查字符串中的每个字符，并更新哈希表（对象`charMap`）中的计数。
2. **同时检查并更新最大计数**：这一操作发生在遍历字符串的过程中，对于每个字符的处理是常数时间复杂度`O(1)`，因此，整体上这一步骤不会改变总的时间复杂度，它仍然是`O(n)`。

综上所述，整段代码的时间复杂度是`O(n)`。

### 空间复杂度

1. **存储字符及其出现次数的对象`charMap`**：在最坏的情况下，如果字符串中的每个字符都不相同，那么这个对象将包含`n`个键值对，其中`n`是字符串的长度。因此，空间复杂度为`O(n)`。
2. **其他变量**（如`maxCount`）：这些都是常数空间，对总体空间复杂度的影响可以忽略不计。

因此，整段代码的空间复杂度也是`O(n)`。

### 总结

这段代码的时间复杂度和空间复杂度都是`O(n)`，其中`n`是输入字符串的长度。这意味着随着输入字符串长度的增加，所需的时间和空间资源线性增长。
 */
